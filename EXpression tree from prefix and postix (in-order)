#include <iostream>
#include <stack>
#include <cctype>

using namespace std;

struct TreeNode {
    char data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(char value) : data(value), left(nullptr), right(nullptr) {}
};

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

TreeNode* constructExpressionTreeFromPostfix(const string& postfix) {
    stack<TreeNode*> st;

    for (char c : postfix) {
        if (isalnum(c)) {  // Operand
            st.push(new TreeNode(c));
        } else if (isOperator(c)) {  // Operator
            TreeNode* operand2 = st.top(); st.pop();
            TreeNode* operand1 = st.top(); st.pop();
            TreeNode* newNode = new TreeNode(c);
            newNode->left = operand1;
            newNode->right = operand2;
            st.push(newNode);
        }
    }

    return st.top();
}

TreeNode* constructExpressionTreeFromPrefix(const string& prefix) {
    stack<TreeNode*> st;

    for (int i = prefix.size() - 1; i >= 0; --i) {
        char c = prefix[i];

        if (isalnum(c)) {  // Operand
            st.push(new TreeNode(c));
        } else if (isOperator(c)) {  // Operator
            TreeNode* operand1 = st.top(); st.pop();
            TreeNode* operand2 = st.top(); st.pop();
            TreeNode* newNode = new TreeNode(c);
            newNode->left = operand1;
            newNode->right = operand2;
            st.push(newNode);
        }
    }

    return st.top();
}

void recursiveInOrderTraversal(TreeNode* root) {
    if (root) {
        recursiveInOrderTraversal(root->left);
        cout << root->data << " ";
        recursiveInOrderTraversal(root->right);
    }
}

void nonRecursiveInOrderTraversal(TreeNode* root) {
    stack<TreeNode*> st;
    TreeNode* current = root;

    while (current || !st.empty()) {
        while (current) {
            st.push(current);
            current = current->left;
        }

        current = st.top(); st.pop();
        cout << current->data << " ";
        current = current->right;
    }
}

int main() {
    string postfix, prefix;
    
    cout << "Enter postfix expression: ";
    cin >> postfix;

    TreeNode* postfixRoot = constructExpressionTreeFromPostfix(postfix);

    cout << "Recursive In-order traversal of postfix expression tree: ";
    recursiveInOrderTraversal(postfixRoot);
    cout << endl;

    cout << "Non-recursive In-order traversal of postfix expression tree: ";
    nonRecursiveInOrderTraversal(postfixRoot);
    cout << endl;

    cout << "Enter prefix expression: ";
    cin >> prefix;

    TreeNode* prefixRoot = constructExpressionTreeFromPrefix(prefix);

    cout << "Recursive In-order traversal of prefix expression tree: ";
    recursiveInOrderTraversal(prefixRoot);
    cout << endl;

    cout << "Non-recursive In-order traversal of prefix expression tree: ";
    nonRecursiveInOrderTraversal(prefixRoot);
    cout << endl;

    return 0;
}
